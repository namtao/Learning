WEBVTT

1
00:00:02.961 --> 00:00:06.641
This lesson covers the Cron service,
the Crontab or

2
00:00:06.641 --> 00:00:10.580
the Crontable format,
as well as the Crontab command.

3
00:00:12.950 --> 00:00:17.655
If you need to repeat a tab Ask on
a schedule, you can use the cron service.

4
00:00:17.655 --> 00:00:21.595
The cron service is a time based job
scheduling system that starts when

5
00:00:21.595 --> 00:00:23.225
the system boots.

6
00:00:23.225 --> 00:00:26.495
Every minute the cron service checks
to see if there are any scheduled jobs

7
00:00:26.495 --> 00:00:29.015
to run, and if so, it runs them.

8
00:00:29.015 --> 00:00:33.815
Cron jobs are often used to automate
a process or perform routine maintenance.

9
00:00:33.815 --> 00:00:36.755
You can schedule cron jobs by
using the crontab command.

10
00:00:38.680 --> 00:00:43.390
A Crontab or Crontable is
a configuration file that specifies when

11
00:00:43.390 --> 00:00:46.240
commands are to be executed by Cron.

12
00:00:46.240 --> 00:00:50.800
Each line in a Crontab represents a job
and contains two pieces of information.

13
00:00:50.800 --> 00:00:54.820
One, when to run and two, what to run.

14
00:00:54.820 --> 00:00:58.340
The time specification
consists of five fields.

15
00:00:58.340 --> 00:01:04.000
They are minutes, hour, day of the month,
month and day of the week.

16
00:01:05.000 --> 00:01:07.961
After the time specification you
provide the command to be executed.

17
00:01:09.820 --> 00:01:13.760
This example Crontab Entry
runs every Monday at 7 am.

18
00:01:16.150 --> 00:01:18.980
The command will only be
executed when all of the time

19
00:01:18.980 --> 00:01:22.830
specification fields match
the current date and time.

20
00:01:22.830 --> 00:01:25.710
You can specify that a command
be run only once, but

21
00:01:25.710 --> 00:01:28.540
this is not the typical use case for Cron.

22
00:01:28.540 --> 00:01:31.760
Typically, one or more of the time
specification fields will contain

23
00:01:31.760 --> 00:01:36.740
an asterisk or a star which matches
any time or date for that field.

24
00:01:38.150 --> 00:01:42.110
This job will run only when
the minute is 0, the hour is 7,

25
00:01:42.110 --> 00:01:42.694
and the day of the week is 1.

26
00:01:42.694 --> 00:01:49.280
In the day of the week field,
0 represents Sunday, 1 is Monday, etc.

27
00:01:50.420 --> 00:01:52.750
This job will run on any day of the month,
and

28
00:01:52.750 --> 00:01:56.330
during any month since the asterisk
was used for those two fields.

29
00:01:58.200 --> 00:02:03.050
If any output is generated by the command
in a Cron job, it is mailed to you.

30
00:02:03.050 --> 00:02:06.190
You can check your local
mail with the mail command.

31
00:02:06.190 --> 00:02:08.070
If you would prefer not to get email,

32
00:02:08.070 --> 00:02:10.880
you can direct the output of
the command as in this example.

33
00:02:14.160 --> 00:02:17.430
You can provide multiple values for
each of the fields.

34
00:02:17.430 --> 00:02:19.500
If you would like to run
a command every half hour,

35
00:02:19.500 --> 00:02:24.608
you could use 0,30 in the minute field or
*/2.

36
00:02:24.608 --> 00:02:28.020
You can even use ranges with a dash.

37
00:02:28.020 --> 00:02:30.090
If you want to run a job every minute for

38
00:02:30.090 --> 00:02:35.665
the first five minutes of the hour,
you can use 0-4 in the minutes field.

39
00:02:35.665 --> 00:02:41.275
That job will get executed at the top of
the hour, zero minutes then one minute.

40
00:02:41.275 --> 00:02:42.635
Two minute, three minute and

41
00:02:42.635 --> 00:02:45.685
at the fourth minute running
a total of five times every hour.

42
00:02:47.560 --> 00:02:51.240
There are several implementations of
the Cron scheduler, and some of those

43
00:02:51.240 --> 00:02:55.350
implementations allow you to use
shortcuts and keywords in your Crontabs.

44
00:02:56.350 --> 00:02:59.010
I'm gonna cover some common shortcuts,
but these may or

45
00:02:59.010 --> 00:03:01.300
may not work on your Linux distribution.

46
00:03:01.300 --> 00:03:05.140
The best thing to do is to man Cron and
check to see if these will work for you.

47
00:03:06.262 --> 00:03:10.140
The @yearly shortcut means to
run once a year at midnight

48
00:03:10.140 --> 00:03:12.710
on the morning of January 1st.

49
00:03:12.710 --> 00:03:15.340
Annually is just the exact
same thing as yearly.

50
00:03:16.360 --> 00:03:18.870
Monthly means run once a month at midnight

51
00:03:18.870 --> 00:03:21.270
on the morning of
the first day of the month.

52
00:03:21.270 --> 00:03:25.380
Weekly, run once a week at
midnight on the morning of Sunday.

53
00:03:25.380 --> 00:03:28.290
Daily, run every day at midnight.

54
00:03:28.290 --> 00:03:32.320
Midnight is the same thing as daily and
hourly means to run

55
00:03:32.320 --> 00:03:35.180
once an hour at the beginning of the hour,
or at the top of the hour.

56
00:03:37.050 --> 00:03:40.450
The Crontab command manipulates cron jobs.

57
00:03:40.450 --> 00:03:44.180
You can use Crontab space file
to install the new Crontab

58
00:03:44.180 --> 00:03:46.570
from the contents of that file.

59
00:03:46.570 --> 00:03:51.639
To list your jobs, run crontab-l,
to edit them use crontab-e.

60
00:03:51.639 --> 00:03:54.870
Note that crontab-e will invoke

61
00:03:54.870 --> 00:03:59.060
the editor that's specified in
the editor environment variable.

62
00:03:59.060 --> 00:04:01.620
Crontab dash r removes
all of your cron jobs.

63
00:04:03.760 --> 00:04:08.490
If we run the Crontab dash l command
it should list our cron jobs, and

64
00:04:08.490 --> 00:04:12.920
in this case I do not have any cron
jobs scheduled, so let's create one.

65
00:04:12.920 --> 00:04:15.841
I'm just going to edit a file
with my favorite editor vi.

66
00:04:24.681 --> 00:04:29.075
Any line that begins with an octothorpe or
a pound sign or a hash, or

67
00:04:29.075 --> 00:04:32.370
whatever you want to call that,
is a comment.

68
00:04:32.370 --> 00:04:36.600
This will be ignored and cell script so
it would be ignored by krone, etcetera.

69
00:04:38.570 --> 00:04:40.590
Let's create a time specification.

70
00:04:40.590 --> 00:04:43.930
So, zero minutes, seven for

71
00:04:43.930 --> 00:04:49.230
the hour and one represent Monday and

72
00:04:49.230 --> 00:04:54.864
we will put the command we want to run,
opt/sales/bin/weekly-report.

73
00:04:56.180 --> 00:04:57.320
I'll save that to that file.

74
00:04:57.320 --> 00:05:03.020
And we can install that file by
running crontab and the file name.

75
00:05:04.870 --> 00:05:08.210
Now when we list our Cron jobs we'll
see that we have one Cron job.

76
00:05:08.210 --> 00:05:13.200
Let's see, let's look at
the editor environment variable.

77
00:05:13.200 --> 00:05:13.900
It's not set.

78
00:05:15.510 --> 00:05:17.580
Let's set editor to vi.

79
00:05:20.890 --> 00:05:25.480
Edit the crontab by running crontab -e.

80
00:05:25.480 --> 00:05:28.880
And if I wanna disable this cron job for
instance, I could just comment it out.

81
00:05:30.690 --> 00:05:36.320
Another way I can do that is run
crontab -r to delete my cron jobs.

82
00:05:36.320 --> 00:05:38.250
And you can see that that removed them.

83
00:05:40.870 --> 00:05:43.940
The cron service runs scheduled jobs.

84
00:05:43.940 --> 00:05:46.181
You can manipulate those jobs
with the crontab command.

