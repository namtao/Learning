WEBVTT

1
00:00:03.400 --> 00:00:09.720
In this lesson you will learn what Environment variables are, what they do, and how to create and delete them.

2
00:00:10.820 --> 00:00:17.600
An environment variable is a storage location that has a name and a value. They often affect the way programs behave.

3
00:00:18.620 --> 00:00:26.460
For example, in earlier lessons you learned how to tell various programs about your preferred editor by setting the $EDITOR environment variable.

4
00:00:26.820 --> 00:00:34.680
The easiest way to view all the environment variable names and values is to run the printenv command without any arguments.

5
00:00:34.820 --> 00:00:40.040
On your screen you can see an example.  Each line contains the environment variable name,

6
00:00:40.300 --> 00:00:44.980
followed by an equals sign, and then the value of that environment variable.

7
00:00:45.160 --> 00:00:54.900
For example, the environment variable HOSTNAME is web01 since that is the hostname of the system that I was logged into when I ran this command.

8
00:00:54.900 --> 00:00:58.900
This is an example of an informational environmental variable.

9
00:00:59.060 --> 00:01:07.900
Another example on your screen is the PATH environment variable.  This is an example of where the value of the variable affects how a program behaves.

10
00:01:07.900 --> 00:01:15.480
In this case, the shell uses the PATH to determine what paths to look for commands to execute and in what order.

11
00:01:15.480 --> 00:01:19.980
If you change the PATH environment variable you change how the shell operates.

12
00:01:20.800 --> 00:01:28.520
If you want to look at the value of one specific environment variable you can pass its name as an argument to the printenv command.

13
00:01:28.920 --> 00:01:34.760
If you were to run "printenv HOME", then only the value of the HOME environment variable will be displayed.

14
00:01:34.760 --> 00:01:39.320
Just like most things in Linux, environment variables are case sensitive.

15
00:01:39.520 --> 00:01:51.080
If you were to execute the printenv command followed by home in all lowercase letters, nothing will be returned because there is no environment variable named home in lowercase letters.

16
00:01:51.220 --> 00:01:59.860
By the way, environment variables are uppercase by convention.  You can create lowercase environment variables but you will rarely see that.

17
00:01:59.860 --> 00:02:09.780
Another way to display the contents of an environment variable is to use the echo command.  With this method you need to prepend a dollar sign to the environment variable name.

18
00:02:09.780 --> 00:02:17.360
If you want to look at the contents of the HOME environment variable you can run "echo $HOME".

19
00:02:17.360 --> 00:02:26.740
Again, environment variables are case sensitive so trying to echo the value of $home in all lowercase letters will not return a result.

20
00:02:26.740 --> 00:02:39.400
When you create an environment variable use the syntax of "export" followed by the environment variable name, followed by an equals sign, and finally the value you want to assign to the variable in quotations.

21
00:02:39.400 --> 00:02:45.080
Do NOT use spaces around the equals sign.  If you do use spaces, you'll get an error.

22
00:02:45.080 --> 00:02:56.540
Run 'export EDITOR="vi"' to create the EDITOR environment variable and assign it the value of "vi".

23
00:02:56.540 --> 00:03:01.280
Some commands look at the EDITOR environment variable to know which editor to start.

24
00:03:01.280 --> 00:03:12.520
By the way, if the EDITOR environment variable already existed, this would overwrite its contents.  So this is not only how you create an environment variable, its also how you can update it.

25
00:03:12.520 --> 00:03:15.660
Another example is setting the TZ variable.

26
00:03:15.660 --> 00:03:26.940
Here, running export TZ="US/Pacific" sets the Time Zone to the US/Pacific time.

27
00:03:26.940 --> 00:03:32.760
The date command, for example, will return a different result depending on the value of the TZ variable.

28
00:03:32.900 --> 00:03:36.100
Let's say you no longer need or want an environment variable.

29
00:03:36.100 --> 00:03:41.200
To remove it from your environment, run the unset command followed by the environment variable name.

30
00:03:41.200 --> 00:03:48.900
For example, let's say we want to rely on the default time zone of the system instead of overriding that with the TZ environment variable.

31
00:03:48.940 --> 00:03:52.980
So we remove it by running "unset TZ".

32
00:03:52.980 --> 00:03:59.980
The act of setting and unsetting environment variables from the command line effects your current session only.

33
00:03:59.980 --> 00:04:10.100
If you want to make your settings persist between logins, you'll want to define your environment variables in your personal initializations files, like the .bash_profile file.

34
00:04:10.220 --> 00:04:13.180
You use the same syntax as you learned.

35
00:04:13.180 --> 00:04:22.480
So if you want to explicitly set your timezone, then you can add an export TZ line in your .bash_profile as shown on the screen.

36
00:04:26.100 --> 00:04:32.400
If we want to see what environment variables are configured, we can run the "printenv" command.

37
00:04:32.660 --> 00:04:41.400
If there are too many of them and they scroll off of your screen, you can pipe the output to a pager utility like less.

38
00:04:46.180 --> 00:04:55.440
Now I know what environment variables are configured in my environment.  If I want to look at the value of just one of the variables, I can use printenv or echo.

39
00:04:55.500 --> 00:04:57.720
Let's look at the PATH.

40
00:04:57.940 --> 00:05:05.900
printenv PATH
echo $PATH

41
00:05:12.760 --> 00:05:15.640
Let's look at the current time with the date command.

42
00:05:15.640 --> 00:05:27.560
Now let's set our timezone by changing the TZ environment variable.

43
00:05:36.980 --> 00:05:43.020
Let's remove the TZ environment variable and see if our timezone is set back to the default.

44
00:05:45.360 --> 00:05:51.980
Now when we run the date command we're back in the US/Eastern timezone because that's the default set on this particular server.

45
00:05:52.200 --> 00:06:01.120
Let's say we want to display the time in the "US/Pacific" timezone.  To make this setting persist, we're going to add it to our ~./bash_profile.

46
00:06:01.120 --> 00:06:07.320
So I'm going to vi editor because that's my favorite editor.  You can use nano, emacs, or whatever editor you like.

47
00:06:07.500 --> 00:06:14.280
$ vi .bash_profile

48
00:06:14.280 --> 00:06:19.980
export TZ="US/Pacific"

49
00:06:20.080 --> 00:06:23.780
Now I'm going to save my changes.

50
00:06:23.780 --> 00:06:27.060
Now if we log out and back in again, that environment variable will be set.

51
00:06:27.060 --> 00:06:30.020
Now I'm going to connect back in.

52
00:06:30.140 --> 00:06:33.780
Now let's see if the TZ variable is set.

53
00:06:35.400 --> 00:06:40.740
Sure enough, it's set to US/Pacific.

54
00:06:40.740 --> 00:06:49.180
By the way, you usually tell what environment variables a program uses by looking at it's man page in the ENVIRONMENT section.

55
00:06:49.280 --> 00:06:51.420
Let's do that for the date command.

56
00:06:51.780 --> 00:06:59.980
If I run "man date" I can look through the man page here.

57
00:07:00.140 --> 00:07:07.520
When I get down to the section called ENVIRONMENT I will see it has one environment variable listed, TZ.

58
00:07:07.520 --> 00:07:12.860
It says here that it specifies the timezone, unless overridden by command line parameters.

59
00:07:12.860 --> 00:07:18.380
So this is how you can tell what impact an environment variable will have on a given application.

60
00:07:18.740 --> 00:07:25.140
In this lesson you learned that environment variables are name/value pairs that can effect the behavior of an application.

61
00:07:25.160 --> 00:07:30.160
You also learned how to view your environment with the printenv and echo commands.

62
00:07:30.160 --> 00:07:35.520
Additionally, you learned how to create or update environment variables using the export syntax.

63
00:07:35.520 --> 00:07:39.940
We talked about removing variables from your environment with the unset command.

64
00:07:39.940 --> 00:07:45.900
Next you learned how to make environment variables and their values persist between sessions.

65
00:07:45.900 --> 00:07:52.860
Finally we talked about how you can find what environment variables a given program uses by looking at it's man page.

