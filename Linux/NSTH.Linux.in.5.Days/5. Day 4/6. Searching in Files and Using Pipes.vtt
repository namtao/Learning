WEBVTT

1
00:00:02.981 --> 00:00:07.206
In this lesson we'll be covering how to
search the contents of files as well as

2
00:00:07.206 --> 00:00:09.100
what pipes are and how to use them.

3
00:00:10.830 --> 00:00:15.025
To look for text within a file,
use the grep command.

4
00:00:15.025 --> 00:00:18.660
A typical format of the command is grep,
Space,

5
00:00:18.660 --> 00:00:22.720
a search pattern, Space, the file that
you're searching for the pattern in.

6
00:00:22.720 --> 00:00:27.450
Here are some options that you
can use with a grep command: -i

7
00:00:27.450 --> 00:00:30.464
will perform a case insensitive search,

8
00:00:30.464 --> 00:00:35.065
-c will display the number of
occurrences that it finds in a file,

9
00:00:35.065 --> 00:00:41.690
-n will precede the output with line
numbers, and -v will do an invert match.

10
00:00:41.690 --> 00:00:44.051
This returns lines that do
not match the search pattern.

11
00:00:47.450 --> 00:00:48.871
Let's look at the contents of this file.

12
00:00:48.871 --> 00:00:52.030
Let's search in this file
with the grep command.

13
00:01:00.410 --> 00:01:03.471
You can see that it'll return
all occurrences that it

14
00:01:03.471 --> 00:01:07.143
finds that match that pattern, so
O is contained in Facebook and

15
00:01:07.143 --> 00:01:11.658
O is also contained in jason, so
grep returns those two lines.

16
00:01:11.658 --> 00:01:16.324
If we wanna do an inverse match,
we'll do a -v, or invert the match, and

17
00:01:16.324 --> 00:01:20.259
we'll display all the lines that
do not contain the letter O.

18
00:01:26.739 --> 00:01:29.500
You can see that it's matching case.

19
00:01:29.500 --> 00:01:33.450
To ignore case, use -i.

20
00:01:33.450 --> 00:01:35.791
So now it will return
the line with lowercase user.

21
00:01:38.471 --> 00:01:41.390
You can also combine options.

22
00:01:41.390 --> 00:01:44.660
We'll do -c for count and ignore case.

23
00:01:46.800 --> 00:01:49.461
And grep says there's only
one line that matches user.

24
00:01:55.981 --> 00:02:00.200
And using -n will display which line
number that the match occurs on.

25
00:02:05.721 --> 00:02:08.870
There are some clues as to
what a file might contain.

26
00:02:08.870 --> 00:02:11.150
For instance,
some files will have an extension.

27
00:02:11.150 --> 00:02:15.900
If the file ends in .txt,
chances are it's a text file.

28
00:02:15.900 --> 00:02:20.950
If a file has executable permissions set,
it might be an executable program.

29
00:02:20.950 --> 00:02:24.410
An easy way to determine the type of
a file is to run the file command

30
00:02:24.410 --> 00:02:26.130
against that file.

31
00:02:26.130 --> 00:02:29.840
If it's a text file, it will say that it's
text in the output of the file command.

32
00:02:29.840 --> 00:02:34.050
A binary file is a file that

33
00:02:34.050 --> 00:02:37.816
is in machine readable format and
not a human readable format.

34
00:02:37.816 --> 00:02:42.320
If you run grep against a binary file
it will simply display whether or

35
00:02:42.320 --> 00:02:46.400
not that information was found in the
file, but it will not display the text.

36
00:02:47.540 --> 00:02:50.821
To look at the textual data within
a binary file, use the strings command.

37
00:02:53.681 --> 00:02:56.180
The vertical bar is called a pipe.

38
00:02:56.180 --> 00:02:58.400
You can chain two commands
together with a pipe.

39
00:02:59.630 --> 00:03:02.620
Pipe takes the standard output
from the preceding command and

40
00:03:02.620 --> 00:03:05.330
passes it as the standard input
to the following command.

41
00:03:06.370 --> 00:03:08.370
If the first command
displays error messages,

42
00:03:08.370 --> 00:03:11.060
those will not be passed to
the second command by default.

43
00:03:12.470 --> 00:03:16.040
Error messages are displayed
on standard error.

44
00:03:16.040 --> 00:03:18.760
If you want standard error
to be passed in as input to

45
00:03:18.760 --> 00:03:23.800
the command following the pipe, you can
redirect standard error to standard input.

46
00:03:23.800 --> 00:03:26.400
How to do that was covered in
the io redirection lesson.

47
00:03:28.660 --> 00:03:32.110
Here is a common pattern that
you'll see often in Linux.

48
00:03:32.110 --> 00:03:36.520
There are several commands that allow you
to specify a file on the command line

49
00:03:36.520 --> 00:03:38.010
that is to be used for input.

50
00:03:39.010 --> 00:03:42.671
With grep, for example, you can run grep,
followed by the pattern,

51
00:03:42.671 --> 00:03:45.690
then followed by the follow to uses input.

52
00:03:45.690 --> 00:03:49.430
If you don't supply a file name then
the command will use standard input.

53
00:03:50.970 --> 00:03:55.910
Grep pattern file is the same
as cat file pipe grep pattern.

54
00:03:57.190 --> 00:04:01.710
That's because cat displays the contents
of the file on standard output.

55
00:04:01.710 --> 00:04:04.820
The pipe takes the standard
output from the cat command and

56
00:04:04.820 --> 00:04:08.380
passes it in as a standard
input to the grep command.

57
00:04:08.380 --> 00:04:10.230
Since no file name was specified for

58
00:04:10.230 --> 00:04:13.500
grep to act on,
it takes standard input as its input.

59
00:04:15.120 --> 00:04:18.340
The cut command allows you to
select portions of a file or

60
00:04:18.340 --> 00:04:20.700
to cut out pieces of a file.

61
00:04:20.700 --> 00:04:24.190
Like grep, if file is omitted,
cut will use standard input.

62
00:04:25.230 --> 00:04:29.527
The -d option for cut allows you
to specify a field delimiter,

63
00:04:29.527 --> 00:04:32.131
-f tells cut which field to display.

64
00:04:37.631 --> 00:04:41.170
Let's look for
the string john in this file.

65
00:04:44.371 --> 00:04:47.322
And we can see that grep tells
us two pieces of information,

66
00:04:47.322 --> 00:04:51.111
that it does find that string in that
file and that that file is a binary file.

67
00:04:55.710 --> 00:04:57.999
The file command reports
that it's an audio file, and

68
00:04:57.999 --> 00:05:00.651
it doesn't say anything about text,
so it's not a text file.

69
00:05:06.771 --> 00:05:10.010
You can see that there are a lot of
strings that are just not human readable.

70
00:05:11.380 --> 00:05:15.200
To just display the strings that are human
readable, we'll use the strings command.

71
00:05:18.560 --> 00:05:21.740
And then we could run our search on this.

72
00:05:21.740 --> 00:05:23.721
Strings, giant, steps.

73
00:05:29.900 --> 00:05:34.750
And now we can see the actual data
that the grep command initially found.

74
00:05:34.750 --> 00:05:38.653
The output of the strings command is sent
to the input of the grep command because

75
00:05:38.653 --> 00:05:41.050
we're using a pipe to
chain those two together.

76
00:05:50.191 --> 00:05:52.190
Pipes aren't limited to two commands.

77
00:05:52.190 --> 00:05:54.320
You can chain as many commands
together as you want.

78
00:05:54.320 --> 00:05:59.170
So, let's take the output that is formed
by those two commands and then pipe it

79
00:05:59.170 --> 00:06:04.660
into, let's say, head-1 to display
the first line of output from grep.

80
00:06:07.740 --> 00:06:11.410
Just gonna hit the up
arrow key to repeat that.

81
00:06:11.410 --> 00:06:12.520
Let's use the cut command.

82
00:06:13.600 --> 00:06:15.880
Let's use space as a delimiter.

83
00:06:15.880 --> 00:06:19.440
And let's print the second field.

84
00:06:20.650 --> 00:06:21.900
And that will just give us Coletrane.

85
00:06:24.210 --> 00:06:28.789
Let's say we want to find all users
named Bob in the /etc/passwd file.

86
00:06:28.789 --> 00:06:33.680
The /etc/passwd file just contains a list
all the accounts on the Linux system.

87
00:06:33.680 --> 00:06:38.540
We want to print each account name and
their real name but no other data.

88
00:06:38.540 --> 00:06:41.835
We want to print them in alphabetical
order by account name, and

89
00:06:41.835 --> 00:06:44.101
we want to display them
in a tabular format.

90
00:06:48.921 --> 00:06:52.300
Let's look for Bob in /etc/passwd.

91
00:06:52.300 --> 00:06:56.070
And what we want to do is print
the account name and real name.

92
00:06:56.070 --> 00:06:59.000
However there's other
information in that file.

93
00:06:59.000 --> 00:07:03.552
So, we can use a cut command to
get the information we want.

94
00:07:03.552 --> 00:07:09.200
For example, it looks like there
are fields that are separated by a colon,

95
00:07:09.200 --> 00:07:14.070
so we can use -d and
use the colon as a field delimiter.

96
00:07:14.070 --> 00:07:18.570
And the first field and the fifth field
are containing information that we want.

97
00:07:18.570 --> 00:07:19.871
So we'll use -f1,5.

98
00:07:24.630 --> 00:07:27.104
We also want to sort them
in alphabetical order, so

99
00:07:27.104 --> 00:07:29.300
the sort command can take care of that for
us.

100
00:07:31.690 --> 00:07:34.785
And we want to get rid of
the colon character, so

101
00:07:34.785 --> 00:07:37.765
we can use a command called tr
that translates characters.

102
00:07:37.765 --> 00:07:40.865
So we'll translate the colon
character into a space character.

103
00:07:42.085 --> 00:07:45.365
And we wanna display this
information in a table format.

104
00:07:45.365 --> 00:07:49.936
So we can use the column command
with a -t for table, and

105
00:07:49.936 --> 00:07:52.765
that gets us the result we desire.

106
00:07:54.390 --> 00:07:59.350
Another common use of pipes is to control
how output is displayed to your screen.

107
00:07:59.350 --> 00:08:02.990
If a command produces a significant amount
of output it can scroll off your screen

108
00:08:02.990 --> 00:08:05.300
before you have a chance to view it.

109
00:08:05.300 --> 00:08:09.960
To control the output,
use a pager utility such as more or less.

110
00:08:09.960 --> 00:08:12.958
You've already used these commands
already on files directly, but

111
00:08:12.958 --> 00:08:15.501
keep in mind that they can take
a redirected input as well.

112
00:08:19.101 --> 00:08:21.970
Let's look at /etc/passwd.

113
00:08:21.970 --> 00:08:25.320
And the contents of that file
scrolled past our screen.

114
00:08:25.320 --> 00:08:29.961
So we can use the less command
to page through that file.

115
00:08:33.140 --> 00:08:34.282
And q to quit.

116
00:08:34.282 --> 00:08:40.000
So cat /etc/passwd | less is really
the same as less /etc/passwd,

117
00:08:40.000 --> 00:08:42.830
and that's kinda how we've been
using it up to this point.

118
00:08:44.250 --> 00:08:46.240
However, if you do something like this.

119
00:08:46.240 --> 00:08:49.850
Let's look for bin in /etc/passwd.

120
00:08:49.850 --> 00:08:54.420
That scrolls past our screen,
so we can pipe that to less.

121
00:08:54.420 --> 00:08:58.160
So this is a situation where you
couldn't use less directly on a file,

122
00:08:58.160 --> 00:09:02.710
however using the standard output of a
previous command as the standard input for

123
00:09:02.710 --> 00:09:04.050
the less command is helpful.

124
00:09:05.170 --> 00:09:08.700
In this lesson we learned how to search
the contents of files using the grep

125
00:09:08.700 --> 00:09:13.620
command, how to determine a file's
type using the file command, how to

126
00:09:13.620 --> 00:09:18.560
cut out pieces of a file using the cut
command, how to translate characters with

127
00:09:18.560 --> 00:09:23.970
the tr command, and how to format output
into columns with the column command.

128
00:09:23.970 --> 00:09:27.400
We also talked about the commands more and
less which are pagers.

129
00:09:28.440 --> 00:09:32.420
The important thing to note here is that
there are many small commands that do

130
00:09:32.420 --> 00:09:36.750
one thing well and that you can chain them
together using pipes to do something very

131
00:09:36.750 --> 00:09:37.930
powerful and useful.

