WEBVTT

1
00:00:03.130 --> 00:00:06.650
In today's lesson we're going to
talk about some shorthand ways to

2
00:00:06.650 --> 00:00:08.510
access directories.

3
00:00:08.510 --> 00:00:12.744
How to execute commands that may live
outside of your $PATH environment

4
00:00:12.744 --> 00:00:13.440
variable.

5
00:00:13.440 --> 00:00:15.550
And how to create and remove directories.

6
00:00:16.930 --> 00:00:21.210
Directories are just Containers for
other files and directories.

7
00:00:21.210 --> 00:00:24.901
In our previous lesson, we've already
covered how directories provide a tree

8
00:00:24.901 --> 00:00:26.390
like structure for the file system.

9
00:00:27.460 --> 00:00:31.580
Directories can be accessed by their name,
a full path, or

10
00:00:31.580 --> 00:00:34.600
a couple of shortcuts that
we're going to go over next.

11
00:00:34.600 --> 00:00:39.430
When working on Linux systems,
a period is often referred to as dot.

12
00:00:39.430 --> 00:00:44.300
This is no different than Google dot
com instead of Google period com.

13
00:00:44.300 --> 00:00:49.680
So, in Linux a single dot represents
this directory, the current directory.

14
00:00:50.920 --> 00:00:54.310
Two dots represent the parent directory.

15
00:00:54.310 --> 00:00:57.480
You can think of the parent directory
as being the directory above your

16
00:00:57.480 --> 00:00:58.980
current directory.

17
00:00:58.980 --> 00:01:01.640
The cd command provides
a shortcut as well.

18
00:01:01.640 --> 00:01:08.440
If you type in cd- Enter, then you'll
be placed into your previous directory.

19
00:01:08.440 --> 00:01:12.700
The directory separator in
Linux is the forward slash.

20
00:01:12.700 --> 00:01:17.449
So you can think of directories as ending
in /, and often this is understood.

21
00:01:17.449 --> 00:01:22.542
For example, if you cd into /home/jason,

22
00:01:22.542 --> 00:01:28.851
that's the same thing as
running cd/home/jason/.

23
00:01:28.851 --> 00:01:31.588
Using directory shortcuts can
make navigation easier, so

24
00:01:31.588 --> 00:01:33.291
let's look at a couple of examples.

25
00:01:37.511 --> 00:01:40.060
Pwd shows our present working directory.

26
00:01:40.060 --> 00:01:45.950
You can type in the name of
a directory to change to it.

27
00:01:48.400 --> 00:01:50.520
And it shows that we
are in that directory.

28
00:01:52.100 --> 00:01:55.002
cd Is go to the parent directory.

29
00:01:59.682 --> 00:02:00.910
Let's run that again.

30
00:02:00.910 --> 00:02:01.470
cd ..

31
00:02:01.470 --> 00:02:03.895
That takes us to /home.

32
00:02:06.110 --> 00:02:10.740
And you can end directories with a /.

33
00:02:10.740 --> 00:02:14.171
So cd jason is the same as cd jason/.

34
00:02:18.473 --> 00:02:21.213
See what happens when we type cd.

35
00:02:24.904 --> 00:02:30.000
So, the dot didn't take us any where
because dot represents this directory.

36
00:02:31.970 --> 00:02:36.940
Let's do this one more time,
cd takes us to the directory above

37
00:02:38.100 --> 00:02:41.320
and we can also specify a full path.

38
00:02:41.320 --> 00:02:48.634
For instance cd /home/jason or
cd /home/jason/.

39
00:02:53.235 --> 00:02:58.055
Let's change to another directory,
cd /var/tmp

40
00:03:04.935 --> 00:03:11.720
OLDPWD, this environment variable holds
the directory that you were previously in.

41
00:03:11.720 --> 00:03:16.350
So if we look at that it shows us that
we were previously in home Jason.

42
00:03:17.480 --> 00:03:22.505
So if we use cd- that takes
us back to home Jason.

43
00:03:24.525 --> 00:03:28.285
We've previously talked about how
the environment variable of $PATH

44
00:03:28.285 --> 00:03:30.360
determines your command search path.

45
00:03:31.630 --> 00:03:35.140
You can specify a command
with a full path.

46
00:03:35.140 --> 00:03:38.520
You can execute commands
that are not in your path.

47
00:03:38.520 --> 00:03:42.340
And if you want to execute a command
in the current directory you're in,

48
00:03:42.340 --> 00:03:46.718
you'd type ./command.

49
00:03:46.718 --> 00:03:51.880
So our $PATH environment variable
determines where your shell will look for

50
00:03:51.880 --> 00:03:52.520
commands.

51
00:03:55.230 --> 00:04:02.510
So, which tells us that if we just
ran cat, that it would run bin cat.

52
00:04:02.510 --> 00:04:08.364
And we can also specify the full
path to that, /bin/cat.

53
00:04:08.364 --> 00:04:11.300
And we get the same result.

54
00:04:12.370 --> 00:04:18.255
However, if we want to run a different
cat, then we could do something like this.

55
00:04:25.357 --> 00:04:29.195
Again, that cat will
not be executed because

56
00:04:29.195 --> 00:04:34.290
home/jason/my-cat is not
in the $PATH environment.

57
00:04:34.290 --> 00:04:35.647
It's not in my command search path.

58
00:04:38.547 --> 00:04:41.207
Let me change directory into my-cat.

59
00:04:41.207 --> 00:04:44.590
So we can remember that
dot is this directory.

60
00:04:44.590 --> 00:04:49.370
Slash is a directory separator and
this is the name of the program.

61
00:04:50.440 --> 00:04:51.350
And it executes.

62
00:04:51.350 --> 00:04:56.120
So if you want to execute something in
your current directory just remember ./

63
00:04:56.120 --> 00:04:56.720
and the name.

64
00:04:59.490 --> 00:05:03.560
If you want to create a directory
you can use the mkdir command.

65
00:05:05.570 --> 00:05:08.270
Now dash p is in brackets and

66
00:05:08.270 --> 00:05:11.840
when I place something in brackets
that means that it's optional.

67
00:05:11.840 --> 00:05:15.850
So make directory requires that you
give it a directory name to create.

68
00:05:15.850 --> 00:05:17.570
However, -p is optional.

69
00:05:17.570 --> 00:05:22.960
So mkdir newdir will
create a new directory.

70
00:05:23.970 --> 00:05:26.275
Name newdir.

71
00:05:28.375 --> 00:05:32.576
Dash p stands for parents so if we want
to create a directory structure that

72
00:05:32.576 --> 00:05:36.098
is more than just one directory
deep we need to specify dash p so

73
00:05:36.098 --> 00:05:38.702
that it will create
the parent directories.

74
00:05:38.702 --> 00:05:46.462
For example, we could use mkdir -p 1/2/3.

75
00:05:46.462 --> 00:05:50.090
That would create three
directories with one command.

76
00:05:50.090 --> 00:05:51.810
One, that's one directory.

77
00:05:51.810 --> 00:05:54.780
One slash two, that is your second depth,
your second directory.

78
00:05:54.780 --> 00:05:57.100
One slash two slash three,
your third directory.

79
00:05:59.010 --> 00:06:02.480
When you want to remove a directory,
use the rmdir command.

80
00:06:03.970 --> 00:06:07.780
The rmdir command only removes
directories that are empty,

81
00:06:07.780 --> 00:06:09.820
that have no file contents.

82
00:06:09.820 --> 00:06:14.555
So So if you have a directory that you
want to remove it and all the files,

83
00:06:14.555 --> 00:06:17.915
you need to use rm -rf
that directory name.

84
00:06:17.915 --> 00:06:22.325
And that recursively deletes everything in
that directory and below that directory.

85
00:06:23.425 --> 00:06:26.995
One important thing to note when you're
working at the command line in Linux,

86
00:06:26.995 --> 00:06:28.355
there is no undo.

87
00:06:28.355 --> 00:06:32.940
There is no trashcan that you can go and
retrieve a file that you've deleted.

88
00:06:32.940 --> 00:06:34.640
When you delete something it's gone.

89
00:06:34.640 --> 00:06:37.810
When you recursively delete something,
all of those files and

90
00:06:37.810 --> 00:06:40.470
directories that you
recursively deleted are gone.

91
00:06:40.470 --> 00:06:41.820
You can't get them back.

92
00:06:41.820 --> 00:06:46.110
So just be careful when
you're using rm -rf.

93
00:06:46.110 --> 00:06:46.857
Let's create a directory.

94
00:06:50.157 --> 00:06:52.417
Let's try this again.

95
00:06:52.417 --> 00:06:57.324
We can see that mkdir command
will not create the third

96
00:06:57.324 --> 00:07:03.630
directory because its parent,
dir2, does not yet exist.

97
00:07:03.630 --> 00:07:08.900
So if we want mkdir to do this
we'll need to specify dash p for

98
00:07:08.900 --> 00:07:12.760
parent so
that it will create the dir2 directory.

99
00:07:15.320 --> 00:07:16.030
And that worked.

100
00:07:19.000 --> 00:07:22.870
Again, the rmdir command only
removes empty directories.

101
00:07:22.870 --> 00:07:26.910
So, dir1 contains dir2 and dir3.

102
00:07:26.910 --> 00:07:33.915
If we want to recursively remove them,
we can use rm -rf dir1.

103
00:07:33.915 --> 00:07:36.335
And now that will delete dir1.

104
00:07:36.335 --> 00:07:39.985
And if there were any files in
that directory they would be gone.

105
00:07:39.985 --> 00:07:44.410
In this case there's only one
directory there, so dir2 will be gone.

106
00:07:44.410 --> 00:07:46.990
And then all the files and
directories that are in there.

107
00:07:46.990 --> 00:07:49.070
Again this deletes everything recursively.

108
00:07:49.070 --> 00:07:53.757
So anything at dir1 and below will
be gone and you can't get it back.

109
00:07:59.738 --> 00:08:02.340
Today we've talked about
some directory shortcuts.

110
00:08:02.340 --> 00:08:05.010
How dot represents this directory.

111
00:08:05.010 --> 00:08:07.335
A dot dot represents a parent directory.

112
00:08:07.335 --> 00:08:12.120
While cd space dash will take you to
the previous directory that you were in.

113
00:08:13.360 --> 00:08:18.230
We talked about how to execute commands
that may not live in your search path.

114
00:08:18.230 --> 00:08:23.060
You can use a full path or you can use
dot slash and the name of the command to

115
00:08:23.060 --> 00:08:25.780
run a command that is in the current
directory that you are in.

116
00:08:26.780 --> 00:08:29.590
We also talked about how to create and
remove directories.

117
00:08:32.170 --> 00:08:35.280
Practice navigating with
directory shortcuts like cd ..

118
00:08:35.280 --> 00:08:38.180
to take you to the parent directory and

119
00:08:38.180 --> 00:08:41.880
cd- to take you back to the directory
that you were previously in.

120
00:08:43.520 --> 00:08:45.760
Also execute some
commands with full paths.

121
00:08:45.760 --> 00:08:49.350
Like /bin/cat to execute cat.

122
00:08:50.650 --> 00:08:53.100
Also work on creating and
removing directories.

123
00:08:53.100 --> 00:08:56.220
And using rm -rf to
recursively remove directories.

